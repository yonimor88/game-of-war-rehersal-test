{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","input","setInput","show","setShow","rank","level","value","tempDeck","map","suit","flat","newDeck","setNewDeck","playerDeck","setPlayerDeck","computerDeck","setComputerDeck","name","wins","loses","gamesPlayed","cards","playerData","setPlayerData","playerScore","setPlayerScore","computerScore","setComputerScore","index","setIndex","moveToGame","i","length","j","Math","floor","random","shuffleDeck","push","destributeCards","alert","console","log","nextCard","backToStart","className","placeholder","onChange","e","target","onClick","id","style","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.58a2a012.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [show, setShow] = useState(1);\n  const suit = [\"♠️\", \"♥️\", \"♦️\", \"♣️\"];\n  const rank = [\n    { level: \"A\", value: 1 },\n    { level: \"2\", value: 2 },\n    { level: \"3\", value: 3 },\n    { level: \"4\", value: 4 },\n    { level: \"5\", value: 5 },\n    { level: \"6\", value: 6 },\n    { level: \"7\", value: 7 },\n    { level: \"8\", value: 8 },\n    { level: \"9\", value: 9 },\n    { level: \"10\", value: 10 },\n    { level: \"J\", value: 11 },\n    { level: \"Q\", value: 12 },\n    { level: \"K\", value: 13 }\n  ];\n  const tempDeck = suit.map(suit => rank.map(rank => ({ rank, suit }))).flat(1);\n  const [newDeck, setNewDeck] = useState(tempDeck);\n  const [playerDeck, setPlayerDeck] = useState([]);\n  const [computerDeck, setComputerDeck] = useState([]);\n  \n  const [playerData, setPlayerData] = useState({\n    name: null,\n    wins: 0,\n    loses: 0,\n    gamesPlayed: 0,\n    cards: playerDeck\n  });\n  const [playerScore, setPlayerScore] = useState(0);\n  const [computerScore, setComputerScore] = useState(0);\n  const [index, setIndex] = useState(0);\n\n  // function that shuffles the deck array\n  const shuffleDeck = () => {\n    for (let i = newDeck.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      setNewDeck(([newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]]));\n    }\n  };\n\n  // function that gives each player 26 parts of the full deck array\n  const destributeCards = () => {\n    debugger;\n    for (let i = 0; i < newDeck.length; i++) {\n      if (i <= 25) {\n        setPlayerDeck([...playerDeck], [playerDeck.push(newDeck[i])]);\n      } else {\n        setComputerDeck([...computerDeck], [computerDeck.push(newDeck[i])]);\n      }\n    }\n  };\n\n  // function that set the \"show\" state to 2 and thus moving the player forward to the game screen-\n  // and call the shuffle and destribute functions\n  const moveToGame = () => {\n    if (input !== \"\") {\n      setShow(2);\n      setPlayerData({ ...playerData, name: input });\n      shuffleDeck();\n      destributeCards();\n    } else {\n      alert(`Please insert at least one character`);\n    }\n    console.log(`newDeck`);\n    console.log(newDeck);\n    console.log(`playerDeck`);\n    console.log(playerDeck);\n    console.log(`computerDeck`);\n    console.log(computerDeck);\n  };\n\n  // function that removes the first card in the array of cards of each player and display the card\n  const nextCard = () => {\n    if (index < playerDeck.length - 1) {\n      setIndex(index + 1);\n      console.log(playerDeck[index]);\n      console.log(computerDeck[index]);\n      if (playerDeck[index].rank.value > computerDeck[index].rank.value) {\n        setPlayerScore(playerScore + 1);\n      } else if (playerDeck[index].rank.value < computerDeck[index].rank.value) {\n        setComputerScore(computerScore + 1);\n      }\n    } else {\n      setShow(3);\n      if (playerScore > computerScore) {\n        setPlayerData({ ...playerData, wins: playerData.wins + 1 });\n      } else {\n        setPlayerData({ ...playerData, loses: playerData.loses + 1 });\n      }\n    }\n  };\n\n  const currentWinOrLose = () => {\n    if (playerScore > computerScore) {\n      return <h1 style={{color: 'lightgreen'}}>you are a Winner!!!</h1>;\n    } else {\n      return <h1 style={{color: 'red'}}>You are a lousy LOOSER BOOOO!!!</h1>;\n    }\n  };\n\n  const backToStart =() =>{\n    setNewDeck(tempDeck)\n    setIndex(0)\n    setPlayerDeck([])\n    setComputerDeck([])\n    setShow(1)\n    setPlayerData({ ...playerData, name:null });\n    setInput('')\n    setPlayerScore(0)\n    setComputerScore(0)\n  }\n  // this section is incharge of switching the viewed content\n  const showContent = () => {\n    if (show === 1) {\n      return (\n        <div className=\"register\">\n          <h1>Ready for WAR!!!</h1>\n          <br />\n          <input\n            placeholder=\"Enter your name\"\n            onChange={e => {setInput(e.target.value);}}>\n          </input>\n          <br />\n          <button onClick={moveToGame}>Start </button>\n        </div>\n      );\n    }\n    if (show === 2) {\n      return (\n        <div id=\"game\">\n          <h3>Computer</h3>\n          <div className=\"card\">\n           {computerDeck[index].rank.level} \n           <br/>\n           {computerDeck[index].suit} \n          </div>\n          <br />\n          <div className=\"card\">\n            {playerDeck[index].rank.level} \n            <br/>\n            {playerDeck[index].suit} \n          </div>\n          <h3> {playerData.name}</h3>\n          <h3>player score: {playerScore} computer score: {computerScore}</h3>\n          <button onClick={nextCard}>next</button>\n        </div>\n      );\n    }\n    if (show === 3) {\n      return (\n        <div id=\"end\">\n          {currentWinOrLose()}\n          <h1><span style={{color: 'lightgreen'}}>wins: {playerData.wins}</span> / <span style={{color: 'red'}}>loses: {playerData.loses}</span></h1>\n\n          <button onClick={backToStart}>Again?</button>\n        </div>\n      );\n    }\n  };\n\n  return <div className=\"App\">{showContent()}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}